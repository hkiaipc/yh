///////////////////////////////////////////////////////////
//  CommuniPortManager.cs
//  Implementation of the Class CommuniPortManager
//  Generated by Enterprise Architect
//  Created on:      08-七月-2009 11:31:16
//  Original author: LiZhL
///////////////////////////////////////////////////////////

using System;
using System.Net;

namespace Xdgk.Communi
{
    /// <summary>
    /// 
    /// </summary>
    public class CommuniPortManager
    {
        #region CommuniPortManager
        /// <summary>
        /// 
        /// </summary>
        public CommuniPortManager( CommuniSoft soft)
        {
            if (soft == null)
                throw new ArgumentNullException("communiSoft");
            this._communiSoft = soft;
        }
        #endregion //CommuniPortManager

        #region Events
        /// <summary>
        /// 
        /// </summary>
        public event CommuniPortReceivedEventHandler CommuniPortReceivedEvent;

        /// <summary>
        /// 
        /// </summary>
        public event CollectionChangedEventHandler CollectionChanged;
        #endregion //Events

        #region CommuniPorts
        /// <summary>
        /// 
        /// </summary>
        public CommuniPortCollection CommuniPorts
        {
            get
            {
                if (_CommuniPortCollection == null)
                    _CommuniPortCollection = new CommuniPortCollection();
                return _CommuniPortCollection;
            }
        } private CommuniPortCollection _CommuniPortCollection;
        #endregion //CommuniPorts

        #region CommuniSoft
        /// <summary>
        /// 
        /// </summary>
        public CommuniSoft CommuniSoft
        {
            get { return _communiSoft; }
        } private CommuniSoft _communiSoft;
        #endregion //CommuniSoft

        #region Add
        /// <summary>
        /// 
        /// </summary>
        /// <param name="cp"></param>
        public void Add(CommuniPort cp)
        {
            BeforeAdd(cp);
            this.CommuniPorts.Add(cp);
            RegisterEvents(cp);
            OnCollectionChanged( ChangedType.Add, cp);
        }
        #endregion //Add

        /// <summary>
        /// 删除集合中已经存在的，相同远程地址的SocketCommuniPort
        /// </summary>
        /// <param name="cp"></param>
        private void BeforeAdd(CommuniPort cp)
        {
            // TODO: allow same ip address option 
            //
            if (cp is SocketCommuniPort)
            {
                SocketCommuniPort scp = cp as SocketCommuniPort;
                for (int i = this.CommuniPorts.Count - 1; i >= 0; i--)
                {
                    CommuniPort cp2 = this.CommuniPorts[i];
                    if (cp2 is SocketCommuniPort)
                    {
                        SocketCommuniPort scp2 = cp2 as SocketCommuniPort;
                        IPEndPoint ipep = scp.RemoteEndPoint as IPEndPoint;
                        IPEndPoint ipep2 = scp2.RemoteEndPoint as IPEndPoint;
                        if (ipep.Address.Equals(ipep2.Address))
                        {
                            Remove(cp2);
                        }
                    }
                }
            }
        }

        #region OnCollectionChanged
        /// <summary>
        /// 
        /// </summary>
        /// <param name="cp"></param>
        private void OnCollectionChanged( ChangedType changedType, CommuniPort cp)
        {
            if (this.CollectionChanged != null)
            {
                CollectionChangedEventHandler temp = this.CollectionChanged;
                CollectionChangedEventArgs e = new CollectionChangedEventArgs(
                    //ChangedType.Add,
                    changedType,
                    cp);
                temp(this, e);
            }
        }
        #endregion //OnCollectionChanged

        #region Remove
        /// <summary>
        /// 
        /// </summary>
        /// <param name="cp"></param>
        public bool Remove(CommuniPort cp)
        {
            if (this.CommuniPorts.Remove(cp))
            {
                UnreginsterEvents(cp);
                OnCollectionChanged(ChangedType.Remove, cp);
                return true;
            }
            return false;
        }
        #endregion //Remove

        #region RegisterEvents
        /// <summary>
        /// 
        /// </summary>
        private void RegisterEvents( CommuniPort cp )
        {
            SocketCommuniPort sckcp = cp as SocketCommuniPort;
            if (sckcp != null)
            {
                sckcp.ClosedEvent += new EventHandler(sckcp_ClosedEvent);
                sckcp.ReceivedEvent += new EventHandler(sckcp_ReceivedEvent);
            }
        }
        #endregion //RegisterEvents

        #region UnreginsterEvents
        /// <summary>
        /// 
        /// </summary>
        private void UnreginsterEvents( CommuniPort cp)
        {
            SocketCommuniPort sckcp = cp as SocketCommuniPort;
            sckcp.ClosedEvent -= new EventHandler(sckcp_ClosedEvent);
            sckcp.ReceivedEvent -= new EventHandler(sckcp_ReceivedEvent);
        }
        #endregion //UnreginsterEvents

        #region sckcp_ReceivedEvent
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sckcp_ReceivedEvent(object sender, EventArgs e)
        {
            SocketCommuniPort sckcp = sender as SocketCommuniPort;
            byte[] bytes = sckcp.Read();
            CommuniPortReceivedEventArgs e2 = new CommuniPortReceivedEventArgs(sckcp, bytes);
            OnCommuniPortReceived(e2);
        }
        #endregion //sckcp_ReceivedEvent

        #region OnCommuniPortReceived
        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        protected void OnCommuniPortReceived(CommuniPortReceivedEventArgs e)
        {
            if (this.CommuniPortReceivedEvent != null)
            {
                CommuniPortReceivedEventHandler t = this.CommuniPortReceivedEvent;
                t(this, e);
            }
        }
        #endregion //OnCommuniPortReceived

        #region sckcp_ClosedEvent
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void sckcp_ClosedEvent(object sender, EventArgs e)
        {
            this.Remove( (CommuniPort)sender );
        }
        #endregion //sckcp_ClosedEvent

        #region FindCommuniPort
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public CommuniPort FindCommuniPort(CommuniType communiType)
        {
            if (communiType == null)
                throw new ArgumentNullException("communiType");

            foreach (CommuniPort cp in this.CommuniPorts)
            {
                if (cp.Match(communiType))
                    return cp;
            }
            return null;
        }
        #endregion //FindCommuniPort

        /// <summary>
        /// check communiport upload data
        /// </summary>
        public void AAA()
        {
            for (int i = this.CommuniPorts.Count - 1; i >= 0; i--)
            {
                CommuniPort cp = this.CommuniPorts[i];
                if (!cp.IsOccupy)
                {
                    byte[] bs = cp.Read();
                    if (bs.Length > 0)
                    {
                        this._communiSoft.FDManager.Process(cp, bs);
                    }
                }
            }
        }
    }
}
