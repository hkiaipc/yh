///////////////////////////////////////////////////////////
//  StationCollection.cs
//  Implementation of the Class StationCollection
//  Generated by Enterprise Architect
//  Created on:      08-七月-2009 11:34:19
//  Original author: LiZhL
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Xdgk.Communi
{

    /// <summary>
    /// 站点集合
    /// </summary>
    public class StationCollection : Xdgk.Common.Collection<Station>
    {

        /// <summary>
        /// 
        /// </summary>
        public StationCollection(HardwareManager hardwareManager)
        {
            if (hardwareManager == null)
            {
                throw new ArgumentNullException("hardwareManager");
            }
            _hardwareManager = hardwareManager;
        }

        /// <summary>
        /// 
        /// </summary>
        public HardwareManager HardwareManager
        {
            get { return _hardwareManager; }
        } private HardwareManager _hardwareManager;

        //#region Add
        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="station"></param>
        //public new void Add(Station station)
        //{
        //    if (this.CheckExist(station.Name))
        //    {
        //        throw new ArgumentException("Exist Station" + station.Name);
        //    }
        //    base.Add(station);
        //}
        //#endregion

        protected override void InsertItem(int index, Station item)
        {
            if (this.CheckExist(item.Name))
            {
                throw new ArgumentException("Exist Station" + item.Name);
            }
            base.InsertItem(index, item);
            item.StationCollection = this;
        }

        #region Remonve
        /// <summary>
        /// 
        /// </summary>
        /// <param name="station"></param>
        public new void Remove(Station station)
        {
            base.Remove(station);
        }
        #endregion

        #region CheckExist
        /// <summary>
        /// 
        /// </summary>
        /// <param name="stationName"></param>
        /// <returns></returns>
        public bool CheckExist(string stationName)
        {
            return ExistName(stationName, null);
        }
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="ignore"></param>
        /// <returns></returns>
        public bool ExistName(string name, Station ignore)
        {
            name = name.Trim();
            foreach (Station st in this)
            {
                if (string.Compare(st.Name, name, true) == 0 &&
                    st != ignore)
                {
                    return true;
                }
            }
            return false;
        }

    }//end StationCollection
}