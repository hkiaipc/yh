///////////////////////////////////////////////////////////
//  SocketCommuniType.cs
//  Implementation of the Class SocketCommuniType
//  Generated by Enterprise Architect
//  Created on:      08-七月-2009 11:33:45
//  Original author: LiZhL
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Net;

namespace Xdgk.Communi
{

    /// <summary>
    /// gprs通讯类型
    /// </summary>
    public class SocketCommuniType : CommuniType
    {

        #region Members


        #endregion //Members



        #region SocketCommuniType
        /// <summary>
        /// byipaddress
        /// </summary>
        /// <param name="mode"></param>
        /// <param name="ip"></param>
        public SocketCommuniType(IPAddress ip)
            //: this(DiscriminateMode.ByIPAddress, ip, 0, "")
        {
            this.DiscriminateMode = DiscriminateMode.ByIPAddress;
            this.IPAddress = ip;
        }
        #endregion //SocketCommuniType


        //#region SocketCommuniType
        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="ip"></param>
        ///// <param name="port"></param>
        //public SocketCommuniType(IPAddress ip, int port)
        //    : this(DiscriminateMode.ByIPAddressPort, ip, port, "")
        //{
        //}
        //#endregion //SocketCommuniType


        #region SocketCommuniType
        /// <summary>
        /// by local or remote port
        /// </summary>
        /// <param name="port"></param>
        public SocketCommuniType(DiscriminateMode dm, int port)
            //: this(DiscriminateMode.ByLocalPort, IPAddress.None, port, "")
        {
            if (dm == DiscriminateMode.ByLocalPort)
                this.LocalPort = port;
            else if (dm == DiscriminateMode.ByRemotePort)
                this.RemotePort = port;
            else
                throw new ArgumentException("dm must be ByLocalPort or ByRemotePort");

            this.DiscriminateMode = dm;
        }
        #endregion //SocketCommuniType


        #region SocketCommuniType
        /// <summary>
        /// by phonenumber
        /// </summary>
        /// <param name="ip"></param>
        /// <param name="port"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="mode"></param>
        public SocketCommuniType(string phoneNumber)
        {
            this.DiscriminateMode = DiscriminateMode.ByPhoneNumber;
            this.PhoneNumber = phoneNumber;
        }
        #endregion //SocketCommuniType


        #region Properties


        #region LocalPort
        /// <summary>
        /// 
        /// </summary>
        public int LocalPort
        {
            get { return _localPort; }
            set
            {
                if (value < 0)
                    throw new ArgumentOutOfRangeException("Port", value, "must > 0");
                this._localPort = value;
            }
        } private int _localPort;
        #endregion //LocalPort


        #region RemotePort
        /// <summary>
        /// 
        /// </summary>
        public int RemotePort
        {
            get { return _remotePort; }
            set
            {
                if( value < 0 )
                    throw new ArgumentOutOfRangeException("Port", value, "must > 0");
                _remotePort = value;
            }
        } private int _remotePort;
        #endregion //RemotePort


        #region DiscriminateMode
        /// <summary>
        /// 
        /// </summary>
        public DiscriminateMode DiscriminateMode
        {
            get { return _discriminateMode; }
            set { _discriminateMode = value; }
        } private DiscriminateMode _discriminateMode;
        #endregion //DiscriminateMode


        #region IPAddress
        /// <summary>
        /// 获取或设置IPAddress
        /// </summary>
        public IPAddress IPAddress
        {
            get { return _ipAddress; }
            set
            {
                if (value == null)
                    throw new ArgumentNullException("IPAddress");
                _ipAddress = value;
            }
        } private IPAddress _ipAddress;
        #endregion //IPAddress



        #region PhoneNumber
        /// <summary>
        /// 获取或设置手机号码
        /// </summary>
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set { _phoneNumber = value; }
        } private string _phoneNumber;
        #endregion //PhoneNumber
        #endregion //Properties

        #region ToXml
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override string ToXml()
        {
            string s = @"<?xml version=""1.0"" encoding=""utf-8"" ?>
<socketcommunitype>
<ipaddress>{0}</ipaddress>
<localport>{1}</localport>
<remoteport>{2}</remoteport>
<phonenumber>{3}</phonenumber>
<discriminatemode>{4}</discriminatemode>
</socketcommunitype>";
            string ipstr = this.IPAddress != null ? IPAddress.ToString() : "";
            s = string.Format(s, ipstr, this.LocalPort, 
                this.RemotePort, this.PhoneNumber, this.DiscriminateMode);
            return s;
        }
        #endregion //ToXml
    }
}
