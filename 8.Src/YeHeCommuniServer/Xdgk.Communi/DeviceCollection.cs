///////////////////////////////////////////////////////////
//  DeviceCollection.cs
//  Implementation of the Class DeviceCollection
//  Generated by Enterprise Architect
//  Created on:      08-七月-2009 11:34:31
//  Original author: LiZhL
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Xdgk.Communi
{

    /// <summary>
    /// 设备集合
    /// </summary>
    public class DeviceCollection : Xdgk.Common.Collection<Device>
    {
        /// <summary>
        /// 
        /// </summary>
        public DeviceCollection()
            : this(true)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="station"></param>
        public DeviceCollection(Station station)
            : this(true)
        {
            this._station = station;
        }

        /// <summary>
        ///
        /// </summary>
        public DeviceCollection( bool allowSameAddress)
        {
            this.AllowSameAddress = allowSameAddress;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="item"></param>
        protected override void InsertItem(int index, Device item)
        {
            if (IsExistAddress(item))
                throw new ArgumentException("Exist address: " + item.Address);
            base.InsertItem(index, item);
            item.Devices = this;
        }

        protected override void ClearItems()
        {
            foreach (Device d in this)
            {
                d.Devices = null;
            }
            base.ClearItems();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        protected override void RemoveItem(int index)
        {
            Device d = this[index];
            d.Devices = null;
            base.RemoveItem(index);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="address"></param>
        /// <returns></returns>
        private bool IsExistAddress( Device device)
        {
            return ExistAddress(device.DeviceType, device.Address, null);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="deviceType"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        public bool ExistAddress(string deviceType, int address)
        {
            return ExistAddress(deviceType, address, null);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="deviceType"></param>
        /// <param name="address"></param>
        /// <param name="ignore"></param>
        /// <returns></returns>
        public bool ExistAddress(string deviceType, int address, Device ignore)
        {
            foreach (Device d in this)
            {
                //if ((dv.Address == address) && string.Compare(dv.DeviceType, deviceType, true) == 0)
                    //return true;
                if (d.Address == address)
                {
                    if (AllowSameAddress)
                    {
                        //if (d.GetType() == device.GetType())
                        if( d.DeviceType == deviceType && d != ignore )
                            return true;
                        else
                            continue;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            return false;
        }
        
        /// <summary>
        /// 获取或设置是否允许不同类型设备使用相同地址
        /// </summary>
        public bool AllowSameAddress
        {
            get { return _allowSameAddress; }
            set { _allowSameAddress = value; }
        } private bool _allowSameAddress;

        /// <summary>
        /// 获取或设置关联站
        /// </summary>
        public Station Station
        {
            get { return _station; }
            set { _station = value; }
        } private Station _station;

    }
}